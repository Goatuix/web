-- Stage-2 Security Check
local HttpService = game:GetService("HttpService")

-- === REQUIRED LOADER VARIABLES ===
if not _G.KA or not _G.KA_TICKET then
    error("[Stage-2] Loader missing. Run through official loader!")
end

-- === CONSTANTS (hardcode your app info) ===
local EXPECTED_OWNERID = "YOUR_OWNERID"
local EXPECTED_APPNAME = "1goat1_1's Application"
local EXPECTED_VERSION = "jzFZ2kDRFW"

-- === Verify session with KeyAuth again ===
local verifyURL = string.format(
    "https://keyauth.win/api/1.1/?name=%s&ownerid=%s&type=check&sessionid=%s",
    HttpService:UrlEncode(_G.KA.name),
    HttpService:UrlEncode(_G.KA.ownerid),
    _G.KA.session
)

local ok, res = pcall(function()
    return game:HttpGet(verifyURL)
end)
if not ok or not res or res == "" then
    error("[Stage-2] Could not reach KeyAuth server.")
end

local data
local success, err = pcall(function()
    data = HttpService:JSONDecode(res)
end)
if not success or not data or not data.success then
    error("[Stage-2] Session check failed.")
end

-- === EXTRA VALIDATION ===
if _G.KA.ownerid ~= EXPECTED_OWNERID then
    error("[Stage-2] Invalid ownerId!")
end
if _G.KA.name ~= EXPECTED_APPNAME then
    error("[Stage-2] Wrong app name!")
end
if _G.KA.version and _G.KA.version ~= EXPECTED_VERSION then
    error("[Stage-2] Version mismatch!")
end

-- === Validate ticket integrity ===
local ticketDecoded = HttpService:Base64Decode(_G.KA_TICKET)
local payload = HttpService:JSONDecode(ticketDecoded)
if payload.sid ~= _G.KA.session or payload.hw ~= _G.KA.hwid or payload.pid ~= game.PlaceId then
    error("[Stage-2] Ticket invalid or tampered.")
end

print(string.format("[Stage-2] Verified user %s âœ…", data.username))
